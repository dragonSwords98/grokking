import numpy as np
from typing import List

class Solution:
    ONE_TO_NINE = ['1', '2', '3', '4', '5', '6', '7', '8', '9']
    _board = []
    _possibles = np.full((9, 9), '')

    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        self._board = np.array(board)
        self.solve()
        board = self.convertBoardToStr(self._board)

    def solve(self):
        self.getPossibilitiesAndFillOnePossibles()
        print(self._possibles)
        print(self._board)

    def convertBoardToStr(self, board: List[List[str]]) -> List[List[str]]:
        return [",".join(item) for item in board.astype(str)]

    def getPossibilitiesAndFillOnePossibles(self):
        for yindex, row in enumerate(self._board):
            for xindex, value in enumerate(row):
                if value == '.':
                    possibles = set(self.ONE_TO_NINE) - set(row).union(set(self._board.T[xindex].flatten())).union(set(self.getBox(yindex, xindex).flatten()))
                    print(possibles)
                    if len(possibles) == 1:
                        self._board[yindex, xindex] = ''.join(possibles)
                    else:
                        print([yindex, xindex, ''.join(possibles)])
                        self._possibles[yindex, xindex] = ''.join(possibles)
                        print(self._possibles[yindex, xindex])

    def getBox(self, yindex, xindex):
        row = self._board[yindex]
        ystart, yend = self.getThreeInBox(yindex)
        xstart, xend  = self.getThreeInBox(xindex)
        return self._board[ystart:yend,xstart:xend]

    def getThreeInBox(self, index):
        start = 0; end = 10

        if index/3 >= 3.0:
            end = 4
        elif index/3 >= 1.5:
            start = 4; end = 7
        else:
            start = 7

        return (start, end)



puzzles = [
    [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]],
    
    [["2","6",".",".","7",".",".",".","."],[".",".","9","6",".","2",".","1","."],["4",".",".","3",".",".",".",".","."],
    [".",".","3",".",".",".",".",".","8"],["8",".","7","9",".","4","5",".","2"],["9",".",".",".",".",".","7",".","."],
    [".",".",".",".",".","7",".",".","5"],[".","4",".","2",".","6","1",".","."],[".",".",".",".","3",".",".","8","6"]],

    [["6",".",".",".",".",".","8",".","3"],[".","4",".","7",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],
    [".",".",".","5",".","4",".","7","."],["3",".",".","2",".",".",".",".","."],["1",".","6",".",".",".",".",".","."],
    [".","2",".",".",".",".",".","5","."],[".",".",".",".","8",".","6",".","."],[".",".",".",".","1",".",".",".","."]],

    [[".",".","5",".",".",".","9","8","7"],[".","4",".",".","5",".",".",".","1"],[".",".","7",".",".",".",".",".","."],
    ["2",".",".",".","4","8",".",".","."],[".","9",".","1",".",".",".",".","."],["6",".",".","2",".",".",".",".","."],
    ["3",".",".","6",".",".","2",".","."],[".",".",".",".",".","9",".","7","."],[".",".",".",".",".",".","5",".","."]],

    [[".",".",".",".",".",".",".","7","1"],[".","2",".","8",".",".",".",".","."],[".",".",".","4",".","3",".",".","."],
    ["7",".",".",".","6",".",".","5","."],[".",".",".","2",".",".","3",".","."],["9",".",".",".",".",".",".",".","."],
    ["6",".",".",".","7",".",".",".","."],[".","8",".",".",".",".","4",".","."],[".",".",".",".","5",".",".",".","."]],

    [[".","4","7",".","8",".",".",".","1"],[".",".",".",".",".",".",".",".","."],[".",".",".","6",".",".","7",".","."],
    ["6",".",".",".",".","3","5","7","."],[".",".",".",".",".","5",".",".","."],[".","1",".",".","6",".",".",".","."],
    ["2","8",".",".","4",".",".",".","."],[".","9",".","1",".",".",".","4","."],[".",".",".",".","2",".","6","9","."]],

    [[".","2",".",".",".",".",".",".","."],["3",".","5",".","6","2",".",".","9"],[".","6","8",".",".",".","3",".","."],
    [".","5",".",".",".",".",".",".","."],[".",".",".","6","4",".","8",".","2"],[".",".","4","7",".",".","9",".","."],
    [".",".","3",".",".",".",".",".","1"],[".",".",".",".",".","6",".",".","."],["1","7",".","4","3",".",".",".","."]],

    [["1",".",".",".",".","6",".","8","."],[".","6","4",".",".",".",".",".","."],[".",".",".",".","4",".",".",".","7"],
    [".",".",".",".","9",".","6",".","."],[".","7",".","4",".",".","5",".","."],["5",".",".",".","7",".","1",".","."],
    [".","5",".",".",".",".","3","2","."],["3",".",".",".",".","8",".",".","."],["4",".",".",".",".",".",".",".","."]],

    [[".",".",".","8",".",".",".",".","9"],[".","8","7","3",".",".",".","4","."],["6",".",".","7",".",".",".",".","."],
    [".",".","8","5",".",".","9","7","."],[".",".",".",".",".",".",".",".","."],[".","4","3",".",".","7","5",".","."],
    [".",".",".",".",".","3",".",".","."],[".","3",".",".",".","1","4","5","."],["4",".",".",".",".","2",".",".","1"]],

    [[".","4",".","5",".",".",".",".","."],["8",".",".",".","9",".",".","3","."],[".","7","6",".","2",".",".",".","."],
    [".","1","4","6",".",".",".",".","."],[".",".",".",".",".","9",".",".","7"],[".",".",".",".",".","3","6",".","."],
    [".",".","1",".",".","4",".","5","."],[".","6",".",".",".",".",".",".","3"],[".",".","7","1",".",".","2",".","."]]
]

for p in puzzles:
    s = Solution()
    s.solveSudoku(p)
    print(p)
    break
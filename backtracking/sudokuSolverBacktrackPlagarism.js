// code is from leetcode


/**
 * @param {character[][]} board
 * @return {void} Do not return anything, modify board in-place instead.
 */
 var solveSudoku = function(board) {
    // 1 - 9 occur once in whole row, whole col, whole box
    // [ith row][number] [ith col][number] [ith box][number]
    // ex: [ith row][N] = 1 means ith row already use number N
    let rows = Array.from(new Array(9), () => new Array(10).fill(0));
    let cols = Array.from(new Array(9), () => new Array(10).fill(0));
    let boxes = Array.from(new Array(9), () => new Array(10).fill(0));
    
    for (let i = 0; i < 9; i++) {
        for (let j = 0; j < 9; j++) {
            const c = board[i][j];
            if (c !== '.') {
                let num = parseInt(c);
                let bx = Math.floor(j / 3);
                let by = Math.floor(i / 3);
                rows[i][num] = 1;
                cols[j][num] = 1;
                boxes[by * 3 + bx][num] = 1;
            }
        }
    }
    if (dfs(board, 0, 0, rows, cols, boxes)) {
        return board
    }
    else {
        return "Failed"
    }
};

function dfs(board, x, y, rows, cols, boxes) {
    // exit recursion condition, reach to the end;
    if (y === 9) return true;
    
    // traverse from left to right, then next row
    let nextX = (x + 1) % 9;
    let nextY = nextX === 0 ? y + 1 : y;
    
    // already has number, DFS next element
    if (board[y][x] !== '.') return dfs(board, nextX, nextY, rows, cols, boxes);
    
    // fill number from 1 - 9
    for (let i = 1; i <= 9; i++) {
        let bx = Math.floor(x / 3);
        let by = Math.floor(y / 3);
        let box_index = by * 3 + bx;
        // if not breaking the following 3 rules
        if (!rows[y][i] && !cols[x][i] && !boxes[box_index][i]) {
            // modify, fill the number
            rows[y][i] = 1;
            cols[x][i] = 1;
            boxes[box_index][i] = 1;
            board[y][x] = i.toString();
            // Try to fill next element, if success return true, or recover
            if (dfs(board, nextX, nextY, rows, cols, boxes)) return true;
            // recover data
            board[y][x] = '.';
            boxes[box_index][i] = 0;
            cols[x][i] = 0;
            rows[y][i] = 0;
        }
    }
    return false;
}


puzzles = [
    [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]],
    
    [["2","6",".",".","7",".",".",".","."],[".",".","9","6",".","2",".","1","."],["4",".",".","3",".",".",".",".","."],
    [".",".","3",".",".",".",".",".","8"],["8",".","7","9",".","4","5",".","2"],["9",".",".",".",".",".","7",".","."],
    [".",".",".",".",".","7",".",".","5"],[".","4",".","2",".","6","1",".","."],[".",".",".",".","3",".",".","8","6"]],

    [["6",".",".",".",".",".","8",".","3"],[".","4",".","7",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],
    [".",".",".","5",".","4",".","7","."],["3",".",".","2",".",".",".",".","."],["1",".","6",".",".",".",".",".","."],
    [".","2",".",".",".",".",".","5","."],[".",".",".",".","8",".","6",".","."],[".",".",".",".","1",".",".",".","."]],

    [[".",".","5",".",".",".","9","8","7"],[".","4",".",".","5",".",".",".","1"],[".",".","7",".",".",".",".",".","."],
    ["2",".",".",".","4","8",".",".","."],[".","9",".","1",".",".",".",".","."],["6",".",".","2",".",".",".",".","."],
    ["3",".",".","6",".",".","2",".","."],[".",".",".",".",".","9",".","7","."],[".",".",".",".",".",".","5",".","."]],

    [[".",".",".",".",".",".",".","7","1"],[".","2",".","8",".",".",".",".","."],[".",".",".","4",".","3",".",".","."],
    ["7",".",".",".","6",".",".","5","."],[".",".",".","2",".",".","3",".","."],["9",".",".",".",".",".",".",".","."],
    ["6",".",".",".","7",".",".",".","."],[".","8",".",".",".",".","4",".","."],[".",".",".",".","5",".",".",".","."]],

    [[".","4","7",".","8",".",".",".","1"],[".",".",".",".",".",".",".",".","."],[".",".",".","6",".",".","7",".","."],
    ["6",".",".",".",".","3","5","7","."],[".",".",".",".",".","5",".",".","."],[".","1",".",".","6",".",".",".","."],
    ["2","8",".",".","4",".",".",".","."],[".","9",".","1",".",".",".","4","."],[".",".",".",".","2",".","6","9","."]],

    [[".","2",".",".",".",".",".",".","."],["3",".","5",".","6","2",".",".","9"],[".","6","8",".",".",".","3",".","."],
    [".","5",".",".",".",".",".",".","."],[".",".",".","6","4",".","8",".","2"],[".",".","4","7",".",".","9",".","."],
    [".",".","3",".",".",".",".",".","1"],[".",".",".",".",".","6",".",".","."],["1","7",".","4","3",".",".",".","."]],

    [["1",".",".",".",".","6",".","8","."],[".","6","4",".",".",".",".",".","."],[".",".",".",".","4",".",".",".","7"],
    [".",".",".",".","9",".","6",".","."],[".","7",".","4",".",".","5",".","."],["5",".",".",".","7",".","1",".","."],
    [".","5",".",".",".",".","3","2","."],["3",".",".",".",".","8",".",".","."],["4",".",".",".",".",".",".",".","."]],

    [[".",".",".","8",".",".",".",".","9"],[".","8","7","3",".",".",".","4","."],["6",".",".","7",".",".",".",".","."],
    [".",".","8","5",".",".","9","7","."],[".",".",".",".",".",".",".",".","."],[".","4","3",".",".","7","5",".","."],
    [".",".",".",".",".","3",".",".","."],[".","3",".",".",".","1","4","5","."],["4",".",".",".",".","2",".",".","1"]],

    [[".","4",".","5",".",".",".",".","."],["8",".",".",".","9",".",".","3","."],[".","7","6",".","2",".",".",".","."],
    [".","1","4","6",".",".",".",".","."],[".",".",".",".",".","9",".",".","7"],[".",".",".",".",".","3","6",".","."],
    [".",".","1",".",".","4",".","5","."],[".","6",".",".",".",".",".",".","3"],[".",".","7","1",".",".","2",".","."]]
]

for (p of puzzles) {
    A = solveSudoku(p)
    console.table(A)
}

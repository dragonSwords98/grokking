# Contributed by: Bryan Ling


import numpy as np
from typing import List

class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        n = 9
        def solve(row, col):
            if row == 9:
                # end of puzzle, must be solved by now
                return True
            if col == 9:
                # go to next row, start at zero again
                return solve(row+1, 0)

            if board[row][col] == ".":
                # trying all the possible numbers from 1-9
                for attempt in range(1, 10, 1):
                    if validateCell(row, col, str(attempt)):
                        board[row][col] = str(attempt)
                    
                        if solve(row, col+1):
                            return True
                        else:
                            # backtrack if a blank was never filled
                            # TODO: do I need this?
                            board[row][col] = "."
                # exhausted attempts on a certain cell, so its an unsolvable/invalid puzzle
                return False
            else:
                return solve(row, col+1)

        def validateCell(row: int, col: int, val: str) -> bool:
            # Tranversing the given sudoku
            for validate in range(0, 9, 1):
                # checking row if the value already there
                # checking column if value already there
                if board[row][validate] == val or board[validate][col] == val:
                    return False
                # check the box
                if board[int(3*(row//3) + validate//3)][int(3*(col//3) + validate%3)] == val:
                    return False

            return True

        solve(0, 0)
        return board
        
        
puzzles = [
    [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]],
    
    [["2","6",".",".","7",".",".",".","."],[".",".","9","6",".","2",".","1","."],["4",".",".","3",".",".",".",".","."],
    [".",".","3",".",".",".",".",".","8"],["8",".","7","9",".","4","5",".","2"],["9",".",".",".",".",".","7",".","."],
    [".",".",".",".",".","7",".",".","5"],[".","4",".","2",".","6","1",".","."],[".",".",".",".","3",".",".","8","6"]],

    [["6",".",".",".",".",".","8",".","3"],[".","4",".","7",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],
    [".",".",".","5",".","4",".","7","."],["3",".",".","2",".",".",".",".","."],["1",".","6",".",".",".",".",".","."],
    [".","2",".",".",".",".",".","5","."],[".",".",".",".","8",".","6",".","."],[".",".",".",".","1",".",".",".","."]],

    [[".",".","5",".",".",".","9","8","7"],[".","4",".",".","5",".",".",".","1"],[".",".","7",".",".",".",".",".","."],
    ["2",".",".",".","4","8",".",".","."],[".","9",".","1",".",".",".",".","."],["6",".",".","2",".",".",".",".","."],
    ["3",".",".","6",".",".","2",".","."],[".",".",".",".",".","9",".","7","."],[".",".",".",".",".",".","5",".","."]],

    [[".",".",".",".",".",".",".","7","1"],[".","2",".","8",".",".",".",".","."],[".",".",".","4",".","3",".",".","."],
    ["7",".",".",".","6",".",".","5","."],[".",".",".","2",".",".","3",".","."],["9",".",".",".",".",".",".",".","."],
    ["6",".",".",".","7",".",".",".","."],[".","8",".",".",".",".","4",".","."],[".",".",".",".","5",".",".",".","."]],

    [[".","4","7",".","8",".",".",".","1"],[".",".",".",".",".",".",".",".","."],[".",".",".","6",".",".","7",".","."],
    ["6",".",".",".",".","3","5","7","."],[".",".",".",".",".","5",".",".","."],[".","1",".",".","6",".",".",".","."],
    ["2","8",".",".","4",".",".",".","."],[".","9",".","1",".",".",".","4","."],[".",".",".",".","2",".","6","9","."]],

    [[".","2",".",".",".",".",".",".","."],["3",".","5",".","6","2",".",".","9"],[".","6","8",".",".",".","3",".","."],
    [".","5",".",".",".",".",".",".","."],[".",".",".","6","4",".","8",".","2"],[".",".","4","7",".",".","9",".","."],
    [".",".","3",".",".",".",".",".","1"],[".",".",".",".",".","6",".",".","."],["1","7",".","4","3",".",".",".","."]],

    [["1",".",".",".",".","6",".","8","."],[".","6","4",".",".",".",".",".","."],[".",".",".",".","4",".",".",".","7"],
    [".",".",".",".","9",".","6",".","."],[".","7",".","4",".",".","5",".","."],["5",".",".",".","7",".","1",".","."],
    [".","5",".",".",".",".","3","2","."],["3",".",".",".",".","8",".",".","."],["4",".",".",".",".",".",".",".","."]],

    [[".",".",".","8",".",".",".",".","9"],[".","8","7","3",".",".",".","4","."],["6",".",".","7",".",".",".",".","."],
    [".",".","8","5",".",".","9","7","."],[".",".",".",".",".",".",".",".","."],[".","4","3",".",".","7","5",".","."],
    [".",".",".",".",".","3",".",".","."],[".","3",".",".",".","1","4","5","."],["4",".",".",".",".","2",".",".","1"]],

    [[".","4",".","5",".",".",".",".","."],["8",".",".",".","9",".",".","3","."],[".","7","6",".","2",".",".",".","."],
    [".","1","4","6",".",".",".",".","."],[".",".",".",".",".","9",".",".","7"],[".",".",".",".",".","3","6",".","."],
    [".",".","1",".",".","4",".","5","."],[".","6",".",".",".",".",".",".","3"],[".",".","7","1",".",".","2",".","."]]
]

for p in puzzles:
    s = Solution()
    a = s.solveSudoku(p)
    print(p)
